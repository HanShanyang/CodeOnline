{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/components/new-problem/new-problem.component.css","webpack:///./src/app/components/new-problem/new-problem.component.html","webpack:///./src/app/components/new-problem/new-problem.component.ts","webpack:///./src/app/components/problem-detail/problem-detail.component.css","webpack:///./src/app/components/problem-detail/problem-detail.component.html","webpack:///./src/app/components/problem-detail/problem-detail.component.ts","webpack:///./src/app/components/problem-list/problem-list.component.css","webpack:///./src/app/components/problem-list/problem-list.component.html","webpack:///./src/app/components/problem-list/problem-list.component.ts","webpack:///./src/app/messages/messages.component.css","webpack:///./src/app/messages/messages.component.html","webpack:///./src/app/messages/messages.component.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/app/services/message.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app works!';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport {HttpClientModule} from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { ProblemListComponent } from './components/problem-list/problem-list.component';\n\nimport { DataService} from \"./services/data.service\";\nimport { ProblemDetailComponent } from './components/problem-detail/problem-detail.component';\nimport { routing } from \"./app.routes\";\nimport { NewProblemComponent } from './components/new-problem/new-problem.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { MessagesComponent } from \"./messages/messages.component\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProblemListComponent,\n    ProblemDetailComponent,\n    NewProblemComponent,\n    NavbarComponent,\n    MessagesComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    HttpClientModule,\n    routing\n  ],\n  providers: [{\n    provide: \"data\",\n    useClass: DataService\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","\nimport {RouterModule, Routes} from \"@angular/router\";\nimport {ProblemListComponent} from \"./components/problem-list/problem-list.component\";\nimport {ProblemDetailComponent} from \"./components/problem-detail/problem-detail.component\";\n\nconst routes:Routes = [\n  {\n    path:\"\",\n    redirectTo:\"problems\",\n    pathMatch:\"full\"\n  },\n  {\n    path:\"problems\",\n    component:ProblemListComponent\n  },\n  {\n    path:\"problems/:id\",\n    component:ProblemDetailComponent\n  },\n  {\n    path:\"**\",\n    redirectTo:\"problems\",\n\n  }\n];\nexport  const  routing = RouterModule.forRoot(routes);\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\n    <a class=\\\"navbar-brand\\\" href=\\\"#\\\">{{title}}</a>\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\n    </button>\\n\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\">\\n\\n      <ul class=\\\"navbar-nav mr-auto\\\">\\n\\n        <form class=\\\"form-inline my-2 my-lg-0\\\">\\n          <input class=\\\"form-control mr-sm-2\\\" type=\\\"search\\\" placeholder=\\\"Search Problem\\\" aria-label=\\\"Search\\\">\\n          <button class=\\\"btn btn-outline-success my-2 my-sm-0\\\" type=\\\"submit\\\">Search</button>\\n        </form>\\n\\n      </ul>\\n\\n      <ul class=\\\"nav navbar-nav navbar-right\\\">\\n        <li class=\\\"nav-item dropdown\\\">\\n          <a class=\\\"nav-link dropdown-toggle\\\" href=\\\"#\\\" id=\\\"navbarDropdown\\\" role=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n            {{username}}\\n          </a>\\n          <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"navbarDropdown\\\">\\n            <a class=\\\"dropdown-item\\\" href=\\\"#\\\">My Profile</a>\\n            <a class=\\\"dropdown-item\\\" href=\\\"#\\\">My Favorites</a>\\n            <a class=\\\"dropdown-item\\\" href=\\\"#\\\">My Submissions</a>\\n            <div class=\\\"dropdown-divider\\\"></div>\\n            <a class=\\\"dropdown-item\\\" href=\\\"#\\\">Log Out</a>\\n          </div>\\n        </li>\\n\\n        <li>\\n          <form class=\\\"navbar-form\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Sign in</button>\\n          </form>\\n        </li>\\n\\n      </ul>\\n\\n    </div>\\n  </nav>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  title = \"COJ\";\n  username=\"hanshanyang\";\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div>\\n  <form #formRef=\\\"ngForm\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"problemName\\\">Problem Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"problemName\\\" name=\\\"problemName\\\"\\n             required placeholder=\\\"Enter Problem Name\\\" [(ngModel)]=\\\"newProblem.name\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"problemName\\\">Problem Description</label>\\n      <textarea type=\\\"text\\\" row=\\\"3\\\" class=\\\"form-control\\\" id=\\\"problemDesc\\\" name=\\\"problemDesc\\\"\\n             required placeholder=\\\"Enter Problem Description\\\" [(ngModel)]=\\\"newProblem.desc\\\">\\n      </textarea>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for= \\\"difficulty\\\">Difficulty</label>\\n      <select type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"difficulty\\\"\\n              name=\\\"difficulty\\\" [(ngModel)]=\\\"newProblem.difficulty\\\">\\n        <option value=\\\"\\\" disabled selected>Select difficulty</option>\\n        <option *ngFor=\\\"let difficulty of difficulties\\\" [value]=\\\"difficulty\\\">\\n          {{difficulty}}\\n        </option>\\n      </select>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary float-right\\\" (click)=\\\"addProblem()\\\">\\n          Add Problem\\n        </button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\"","import {Component, Inject, OnInit} from '@angular/core';\nimport {Problem} from \"../../models/problem.model\";\n\n\nconst DEFAULT_PROBLEMS:Problem = Object.freeze({\n  id:0,\n  name:\"\",\n  desc:\"\",\n  difficulty:\"\"\n\n});\n@Component({\n  selector: 'app-new-problem',\n  templateUrl: './new-problem.component.html',\n  styleUrls: ['./new-problem.component.css']\n})\nexport class NewProblemComponent implements OnInit {\n\n  public difficulties = [\"Easy\",\"Medium\",\"Hard\",\"Super\"];\n\n  newProblem : Problem = Object.assign({},DEFAULT_PROBLEMS);\n\n\n  constructor(@Inject(\"data\")private data) { }\n\n  ngOnInit() {\n  }\n\n  addProblem():void {\n    /*this.data.addProblem(this.newProblem);\n    this.newProblem = Object.assign({},DEFAULT_PROBLEMS);*/\n    this.data.addProblem(this.newProblem)\n      .catch(error => console.log(error._body));\n    this.newProblem = Object.assign({}, DEFAULT_PROBLEMS);\n\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\" *ngIf=\\\"problem\\\">\\n  <div class=\\\"col-xs-12 col-md-4\\\">\\n    <div>\\n      <h2>\\n        {{problem.id}}{{problem.name}}\\n      </h2>\\n      <p>\\n        {{problem.desc}}\\n      </p>\\n      <br/>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, Inject, OnInit } from '@angular/core';\nimport { Problem } from \"../../models/problem.model\";\nimport { ActivatedRoute } from \"@angular/router\";\n\n@Component({\n  selector: 'app-problem-detail',\n  templateUrl: './problem-detail.component.html',\n  styleUrls: ['./problem-detail.component.css']\n})\nexport class ProblemDetailComponent implements OnInit {\n\n  problem: Problem;\n\n  constructor(private route: ActivatedRoute,\n              @Inject(\"data\") private data\n  ) { }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      /*this.problem = this.data.getProblem(+params[\"id\"]);*/\n        this.data.getProblem(+params[\"id\"])\n          .then(problem => this.problem=problem);\n    });\n  }\n\n}\n","module.exports = \".difficulty{\\n  min-width: 60px;\\n  margin-right: 10px;\\n}\\n.label.difficulty{\\n  padding-top: 0.6em;\\n  color: #fbfdfa;\\n  font-size: 12px;\\n}\\n.title{\\n  font-size: 1.2em;\\n}\\n.diff-easy{\\n  background-color: #42ebf4;\\n}\\n.diff-medium{\\n  background-color: #92cf5c;\\n}\\n.diff-hard{\\n  background-color: #dd0d1e;\\n}\\n.diff-super{\\n  background-color: #8d16e2;\\n}\\n\"","module.exports = \"<div class=\\\"container\\\">\\n  <app-new-problem></app-new-problem>\\n  <app-messages></app-messages>\\n  <div class=\\\"list-group\\\">\\n    <a class=\\\"list-group-item\\\" *ngFor=\\\"let problem of problems\\\"\\n       [routerLink]=\\\"['/problems',problem.id]\\\">\\n      <span class=\\\"{{'pull-left label difficulty diff-' + problem.difficulty.toLocaleLowerCase()}}\\\">{{problem.difficulty}}</span>\\n      <strong class=\\\"title\\\">{{problem.id}}.{{problem.name}}</strong>\\n    </a>\\n  </div>\\n\\n</div>\\n\"","import {Component, Inject, OnInit} from '@angular/core';\nimport { Problem } from \"../../models/problem.model\";\nimport {PROBLEMS} from \"../../mock-problems\";\nimport {Subscription} from \"rxjs/Subscription\";\n\n@Component({\n  selector: 'app-problem-list',\n  templateUrl: './problem-list.component.html',\n  styleUrls: ['./problem-list.component.css']\n})\nexport class ProblemListComponent implements OnInit {\n\n  /*problems:Problem[];*/\n\n  problems:Problem[] = [];\n  subscriptionProblems:Subscription;\n\n  constructor(@Inject(\"data\") private data) { }\n\n  ngOnInit() {\n    this.getProblems();\n  }\n  getProblems(): void {\n    /*this.problems = this.data.getProblems();*/\n    this.subscriptionProblems= this.data.getProblems()\n     .subscribe(problems => this.problems = problems);\n\n  }\n}\n\n\n","module.exports = \"/* MessagesComponent's private CSS styles */\\nh2 {\\n  color: red;\\n  font-family: Arial, Helvetica, sans-serif;\\n  font-weight: lighter;\\n}\\nbody {\\n  margin: 2em;\\n}\\nbody, input[text], button {\\n  color: crimson;\\n  font-family: Cambria, Georgia;\\n}\\nbutton.clear {\\n  font-family: Arial;\\n  background-color: #eee;\\n  border: none;\\n  padding: 5px 10px;\\n  border-radius: 4px;\\n  cursor: pointer;\\n  cursor: hand;\\n}\\nbutton:hover {\\n  background-color: #cfd8dc;\\n}\\nbutton:disabled {\\n  background-color: #eee;\\n  color: #aaa;\\n  cursor: auto;\\n}\\nbutton.clear {\\n  color: #888;\\n  margin-bottom: 12px;\\n}\\n\"","module.exports = \"<div *ngIf=\\\"messageService.messages.length\\\">\\n\\n  <h2>Messages</h2>\\n  <button class=\\\"clear\\\"\\n          (click)=\\\"messageService.clear()\\\">clear</button>\\n  <div *ngFor='let message of messageService.messages'> {{message}} </div>\\n\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {MessageService} from \"../services/message.service\";\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.component.html',\n  styleUrls: ['./messages.component.css']\n})\nexport class MessagesComponent implements OnInit {\n\n  constructor(public messageService: MessageService) {}\n\n  ngOnInit() {\n  }\n\n}\n","/*\n//version 1\nimport { Injectable } from '@angular/core';\nimport { Problem } from \"../models/problem.model\";\nimport { PROBLEMS } from \"../mock-problems\";\nimport {Http ,Response,Headers} from '@angular/http';\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\nimport { Observable } from \"rxjs/Rx\";\nimport 'rxjs/add/operator/toPromise';\nimport {_catch} from \"rxjs-compat/operator/catch\";\n\n@Injectable()\nexport class DataService {\n\n  /!*problems:Problem[] =PROBLEMS;*!/\n\n  private problemsSource = new BehaviorSubject<Problem[]>([]);\n\n  constructor(private http:Http) { }\n\n  getProblems():/!*Problem[]*!/Observable<Problem[]> {\n    /!*return this.problems;*!/\n    this.http.get(\"api/v1/problems\")\n      .toPromise()\n      .then((res:Response)=>{\n        this.problemsSource.next(res.json());\n      })\n      .catch(this.handleError);\n    return this.problemsSource.asObservable();\n  }\n  getProblem(id:number):/!*Problem*!/ Promise<Problem>{\n    /!*return this.problems.find((problem)=>problem.id === id);*!/\n    return this.http.get(`api/v1/problems/${id}`)\n      .toPromise()\n      .then((res:Response) => res.json())\n      .catch(this.handleError);\n\n  }\n\n  addProblem(problem:Problem):/!*void*!/Promise<Problem> {\n    /!*    problem.id = this.problems.length + 1;\n        this.problems.push(problem);*!/\n    let headers = new Headers({'content-type':'application/json'});\n    return this.http.post('/api/v1/problems',problem,headers)\n      .toPromise()\n      .then((res:Response) => {\n        this.getProblems();\n        return res.json();\n      })\n      .catch(this.handleError);\n  }\n  //error handler\n  private handleError(error:any): Promise<any>{\n    console.error('An error occurred',error);\n    return Promise.reject(error.body || error);\n  }\n}*/\n\n//version 2\nimport { Injectable } from '@angular/core';\nimport { Problem } from \"../models/problem.model\";\nimport { PROBLEMS } from \"../mock-problems\";\nimport { Http, Response, Headers } from '@angular/http';\nimport { BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/add/operator/toPromise';\n\n\n@Injectable()\nexport class DataService {\n\n  private problemsSource = new BehaviorSubject<Problem[]>([]);\n\n  constructor(private http: Http) { }\n\n  getProblems(): Observable<Problem[]> {\n    this.http.get(\"api/v1/problems\")\n      .toPromise()\n      .then((res: Response) => {\n        this.problemsSource.next(res.json());\n      })\n      .catch(this.handleError);\n\n    return this.problemsSource.asObservable();\n  }\n\n  getProblem(id: number): Promise<Problem> {\n    return this.http.get(`api/v1/problems/${id}`)\n      .toPromise()\n      .then((res: Response) => res.json())\n      .catch(this.handleError);\n  }\n\n  addProblem(problem: Problem): Promise<Problem> {\n    let headers = new Headers({ 'content-type': 'application/json' });\n    return this.http.post('/api/v1/problems', problem, {headers})\n      .toPromise()\n      .then((res: Response) => {\n        this.getProblems();\n        return res.json();\n      })\n      .catch(this.handleError);\n  }\n\n  // error hanlder\n  private handleError(error: any): Promise<any> {\n    console.error('An error occurred', error); // for demo purposes only\n    return Promise.reject(error.body || error);\n  }\n}\n\n\n/*\n//version 3\nimport { Injectable } from '@angular/core';\nimport { Problem } from \"../models/problem.model\";\nimport { PROBLEMS } from \"../mock-problems\";\nimport { Http, Response, Headers } from '@angular/http';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/add/operator/toPromise';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n\n@Injectable()\nexport class DataService {\n\n  private problemsUrl = 'api/v1/problems';  // URL to web api\n\n  private problemsSource = new BehaviorSubject<Problem[]>([]);\n\n  /!*constructor(private http: Http) { }*!/\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /!** Log a dataService message with the MessageService *!/\n  private log(message: string) {\n    this.messageService.add(`DataService: ${message}`);\n  }\n\n  /!** GET heroes from the server *!/\n  getProblems (): Observable<Problem[]> {\n    return this.http.get<Problem[]>(this.problemsUrl)\n      .pipe(\n        tap(heroes => this.log('fetched problems')),\n        catchError(this.handleError('getProblems', []))\n      );\n  }\n\n/!*  /!** GET problems from the server *!/\n  getProblems (): Observable<Problem[]> {\n    return this.http.get<Problem[]>(this.problemsUrl)\n      .pipe(\n        catchError(this.handleError('getProblems', []))\n      );\n  }*!/\n\n/!*  getProblems(): Observable<Problem[]> {\n    return this.http.get<Problem[]>(this.problemUrl)\n  }*!/\n /!* getProblems(): Observable<Problem[]> {\n    this.http.get(\"api/v1/problems\")\n      .toPromise()\n      .then((res: Response) => {\n        this.problemsSource.next(res.json());\n      })\n      .catch(this.handleError);\n\n    return this.problemsSource.asObservable();\n  }*!/\n\n  /!** GET hero by id. Will 404 if id not found *!/\n  getProblem(id: number): Observable<Problem> {\n    const url = `${this.problemsUrl}/${id}`;\n    return this.http.get<Problem>(url).pipe(\n      tap(_ => this.log(`fetched problem id=${id}`)),\n      catchError(this.handleError<Problem>(`getProblem id=${id}`))\n    );\n  }\n/!*  getProblem(id: number): Promise<Problem> {\n    return this.http.get(`api/v1/problems/${id}`)\n      .toPromise()\n      .then((res: Response) => res.json())\n      .catch(this.handleError);\n  }*!/\n\n  /!** POST: add a new hero to the server *!/\n  addProblem (problem: Problem): Observable<Problem> {\n    return this.http.post<Problem>(this.problemsUrl, problem, httpOptions).pipe(\n      tap((problem: Problem) => this.log(`added problem w/ id=${problem.id}`)),\n      catchError(this.handleError<Problem>('addProblem'))\n    );\n  }\n/!*  addProblem(problem: Problem): Promise<Problem> {\n    let headers = new Headers({'content-type':'application/json'});\n    return this.http.post('/api/v1/problems',problem,headers)\n      .toPromise()\n      .then((res: Response) => {\n        this.getProblems();\n        return res.json();\n      })\n      .catch(this.handleError);\n  }*!/\n\n\n  /!**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   *!/\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n/!*  // error hanlder\n  private handleError(error: any): Promise<any> {\n    console.error('An error occurred', error); // for demo purposes only\n    return Promise.reject(error.body || error);\n  }*!/\n}\n*/\n\n/*\n//version:4\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { Problem } from \"../models/problem.model\";\nimport {MessageService} from \"./message.service\";\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({ providedIn: 'root' })\nexport class DataService {\n\n  private problemsUrl = 'api/heroes';  // URL to web api\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n\n  /!** GET heroes from the server *!/\n  getProblems (): Observable<Problem[]> {\n    return this.http.get<Problem[]>(this.problemsUrl)\n      .pipe(\n        tap(problems => this.log('fetched problems')),\n        catchError(this.handleError('getProblems', []))\n      );\n  }\n\n\n\n  //////// Save methods //////////\n\n  /!** POST: add a new hero to the server *!/\n  addProblem (problem: Problem): Observable<Problem> {\n    return this.http.post<Problem>(this.problemsUrl, problem, httpOptions).pipe(\n      tap((problem: Problem) => this.log(`added problem w/ id=${problem.id}`)),\n      catchError(this.handleError<Problem>('addProblem'))\n    );\n  }\n\n\n  /!**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   *!/\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /!** Log a HeroService message with the MessageService *!/\n  private log(message: string) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}*/\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessageService {\n  messages: string[] = [];\n\n  add(message: string) {\n    this.messages.push(message);\n  }\n\n  clear() {\n    this.messages = [];\n  }\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"],"sourceRoot":""}